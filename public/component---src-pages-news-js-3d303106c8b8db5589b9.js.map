{"version":3,"file":"component---src-pages-news-js-3d303106c8b8db5589b9.js","mappings":"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","sources":["webpack://string.eusa.ed.ac.uk/./src/components/PostListing.js","webpack://string.eusa.ed.ac.uk/./src/components/SEO.js","webpack://string.eusa.ed.ac.uk/./src/pages/news.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'gatsby'\nimport { formatDate } from '../utils/global'\n\nexport default class PostListing extends Component {\n  getPostList() {\n    const { postEdges } = this.props\n    const postList = postEdges.map(postEdge => {\n      return {\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        thumbnail: postEdge.node.frontmatter.thumbnail,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n        categories: postEdge.node.frontmatter.categories,\n      }\n    })\n    return postList\n  }\n\n  render() {\n    const { simple } = this.props\n    const postList = this.getPostList()\n\n    return (\n      <section className={`posts ${simple ? 'simple' : ''}`}>\n        {postList.map(post => {\n\n          const date = formatDate(post.date)\n\n          return (\n            <Link to={post.path} key={post.title}>\n              <div className=\"each\">\n                <div />\n                <div className=\"each-list-item\">\n                  {!simple ? <h2>{post.title}</h2> : <h3>{post.title}</h3>}\n                  <div className=\"datetime\">{date}</div>\n                  {!simple ? <div /> : <p>{post.excerpt}</p>}\n                </div>\n              </div>\n            </Link>\n          )\n        })}\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport urljoin from 'url-join'\nimport config from '../../data/SiteConfig'\n\nexport default class SEO extends Component {\n  render() {\n    const replacePath = path => (path === `/` ? path : path.replace(/\\/$/, ``));\n    const { postNode, postPath, postSEO } = this.props\n    let title\n    let description\n    let image = ''\n    let postURL\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter\n      title = postMeta.title\n      description = postMeta.description ? postMeta.description : postNode.excerpt\n      if (postMeta.thumbnail) {\n        image = postMeta.thumbnail.childImageSharp.fixed.src\n      }\n      postURL = urljoin(config.siteUrl, replacePath(postPath))\n    } else {\n      title = config.siteTitle\n      description = config.siteDescription\n      image = config.siteLogo\n    }\n\n    image = urljoin(config.siteUrl, image)\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n      },\n    ]\n\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n          headline: title,\n          image: {\n            '@type': 'ImageObject',\n            url: image,\n          },\n          description,\n        }\n      )\n    }\n    return (\n      <Helmet>\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        <script type=\"application/ld+json\">{JSON.stringify(schemaOrgJSONLD)}</script>\n\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO && <meta property=\"og:type\" content=\"article\" />}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:creator\" content={config.userTwitter} />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\n\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\n\nexport default class BlogPage extends Component {\n  state = {\n    searchTerm: '',\n    posts: this.props.data.posts.edges,\n    filteredPosts: this.props.data.posts.edges,\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target\n\n    this.setState({ [name]: value }, () => this.filterPosts())\n  }\n\n  filterPosts = () => {\n    const { posts, searchTerm } = this.state\n\n    const filteredPosts = posts.filter(post =>\n      post.node.frontmatter.title.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n\n    this.setState({ filteredPosts })\n  }\n\n  render() {\n    const { filteredPosts } = this.state\n\n    return (\n      <Layout>\n        <Helmet title={`News â€“ ${config.siteTitle}`} />\n        <SEO />\n        <div className=\"container\">\n          <h1 className=\"articles-title\">News</h1>\n          <p>{`On this page, we regularly post about upcoming concerts, events, auditions, and much more.\n               If you want to keep updated, you can subscribe to our\n             `}\n            <Link to=\"/newsletter/\">\n              newsletter\n            </Link>\n            {`.`}\n          </p>\n          <PostListing postEdges={filteredPosts} />\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query BlogQuery {\n    posts: allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt(pruneLength: 180)\n          timeToRead\n          frontmatter {\n            title\n            tags\n            categories\n            thumbnail {\n              childImageSharp {\n                fixed(width: 50, height: 50) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n            date\n            template\n          }\n        }\n      }\n    }\n    categories: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___categories) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"names":["PostListing","getPostList","this","props","postEdges","map","postEdge","path","node","fields","slug","tags","frontmatter","thumbnail","title","date","excerpt","timeToRead","categories","render","simple","postList","className","post","formatDate","Link","to","key","Component","SEO","description","postURL","postNode","postPath","postSEO","image","postMeta","childImageSharp","fixed","src","urljoin","config","replace","blogURL","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","BlogPage","state","searchTerm","posts","data","edges","filteredPosts","handleChange","event","target","value","setState","filterPosts","filter","toLowerCase","includes"],"sourceRoot":""}