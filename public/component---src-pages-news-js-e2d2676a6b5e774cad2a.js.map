{"version":3,"sources":["webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.string.fixed.js","webpack:///./src/components/SEO.js","webpack:///./src/pages/news.js","webpack:///./src/components/PostListing.js"],"names":["createHTML","this","SEO","render","title","description","postURL","path","props","postNode","postPath","postSEO","image","postMeta","frontmatter","excerpt","thumbnail","childImageSharp","fixed","src","urljoin","config","siteUrl","replace","siteTitle","siteDescription","siteLogo","blogURL","pathPrefix","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","userTwitter","Component","BlogPage","state","searchTerm","posts","data","edges","filteredPosts","handleChange","event","target","value","setState","filterPosts","filter","post","node","toLowerCase","includes","className","to","postEdges","pageQuery","PostListing","getPostList","map","postEdge","fields","slug","tags","date","timeToRead","categories","simple","postList","formatDate","key"],"mappings":"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","file":"component---src-pages-news-js-e2d2676a6b5e774cad2a.js","sourcesContent":["'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport urljoin from 'url-join'\nimport config from '../../data/SiteConfig'\n\nexport default class SEO extends Component {\n  render() {\n    const replacePath = path => (path === `/` ? path : path.replace(/\\/$/, ``));\n    const { postNode, postPath, postSEO } = this.props\n    let title\n    let description\n    let image = ''\n    let postURL\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter\n      title = postMeta.title\n      description = postMeta.description ? postMeta.description : postNode.excerpt\n      if (postMeta.thumbnail) {\n        image = postMeta.thumbnail.childImageSharp.fixed.src\n      }\n      postURL = urljoin(config.siteUrl, replacePath(postPath))\n    } else {\n      title = config.siteTitle\n      description = config.siteDescription\n      image = config.siteLogo\n    }\n\n    image = urljoin(config.siteUrl, image)\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n      },\n    ]\n\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n          headline: title,\n          image: {\n            '@type': 'ImageObject',\n            url: image,\n          },\n          description,\n        }\n      )\n    }\n    return (\n      <Helmet>\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        <script type=\"application/ld+json\">{JSON.stringify(schemaOrgJSONLD)}</script>\n\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO && <meta property=\"og:type\" content=\"article\" />}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:creator\" content={config.userTwitter} />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\n\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\n\nexport default class BlogPage extends Component {\n  state = {\n    searchTerm: '',\n    posts: this.props.data.posts.edges,\n    filteredPosts: this.props.data.posts.edges,\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target\n\n    this.setState({ [name]: value }, () => this.filterPosts())\n  }\n\n  filterPosts = () => {\n    const { posts, searchTerm } = this.state\n\n    const filteredPosts = posts.filter(post =>\n      post.node.frontmatter.title.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n\n    this.setState({ filteredPosts })\n  }\n\n  render() {\n    const { filteredPosts } = this.state\n\n    return (\n      <Layout>\n        <Helmet title={`News â€“ ${config.siteTitle}`} />\n        <SEO />\n        <div className=\"container\">\n          <h1 className=\"articles-title\">News</h1>\n          <p>{`On this page, we regularly post about upcoming concerts, events, auditions, and much more.\n               If you want to keep updated, you can subscribe to our\n             `}\n            <Link to=\"/newsletter/\">\n              newsletter\n            </Link>\n            {`.`}\n          </p>\n          <PostListing postEdges={filteredPosts} />\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const pageQuery = graphql`\n  query BlogQuery {\n    posts: allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt(pruneLength: 180)\n          timeToRead\n          frontmatter {\n            title\n            tags\n            categories\n            thumbnail {\n              childImageSharp {\n                fixed(width: 50, height: 50) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n            date\n            template\n          }\n        }\n      }\n    }\n    categories: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___categories) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","import React, { Component } from 'react'\nimport { Link } from 'gatsby'\nimport { formatDate } from '../utils/global'\n\nexport default class PostListing extends Component {\n  getPostList() {\n    const { postEdges } = this.props\n    const postList = postEdges.map(postEdge => {\n      return {\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        thumbnail: postEdge.node.frontmatter.thumbnail,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead,\n        categories: postEdge.node.frontmatter.categories,\n      }\n    })\n    return postList\n  }\n\n  render() {\n    const { simple } = this.props\n    const postList = this.getPostList()\n\n    return (\n      <section className={`posts ${simple ? 'simple' : ''}`}>\n        {postList.map(post => {\n\n          const date = formatDate(post.date)\n\n          return (\n            <Link to={post.path} key={post.title}>\n              <div className=\"each\">\n                <div />\n                <div className=\"each-list-item\">\n                  {!simple ? <h2>{post.title}</h2> : <h3>{post.title}</h3>}\n                  <div className=\"datetime\">{date}</div>\n                  {!simple ? <div /> : <p>{post.excerpt}</p>}\n                </div>\n              </div>\n            </Link>\n          )\n        })}\n      </section>\n    )\n  }\n}\n"],"sourceRoot":""}