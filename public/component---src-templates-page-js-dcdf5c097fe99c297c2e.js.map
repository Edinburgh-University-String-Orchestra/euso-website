{"version":3,"file":"component---src-templates-page-js-dcdf5c097fe99c297c2e.js","mappings":"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","sources":["webpack://string.eusa.ed.ac.uk/./src/components/SEO.js","webpack://string.eusa.ed.ac.uk/./src/templates/page.js"],"sourcesContent":["import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport urljoin from 'url-join'\nimport config from '../../data/SiteConfig'\n\nexport default class SEO extends Component {\n  render() {\n    const replacePath = path => (path === `/` ? path : path.replace(/\\/$/, ``));\n    const { postNode, postPath, postSEO } = this.props\n    let title\n    let description\n    let image = ''\n    let postURL\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter\n      title = postMeta.title\n      description = postMeta.description ? postMeta.description : postNode.excerpt\n      if (postMeta.thumbnail) {\n        image = postMeta.thumbnail.childImageSharp.fixed.src\n      }\n      postURL = urljoin(config.siteUrl, replacePath(postPath))\n    } else {\n      title = config.siteTitle\n      description = config.siteDescription\n      image = config.siteLogo\n    }\n\n    image = urljoin(config.siteUrl, image)\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix)\n    const schemaOrgJSONLD = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n      },\n    ]\n\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              position: 1,\n              item: {\n                '@id': postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          '@context': 'http://schema.org',\n          '@type': 'BlogPosting',\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n          headline: title,\n          image: {\n            '@type': 'ImageObject',\n            url: image,\n          },\n          description,\n        }\n      )\n    }\n    return (\n      <Helmet>\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        <script type=\"application/ld+json\">{JSON.stringify(schemaOrgJSONLD)}</script>\n\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO && <meta property=\"og:type\" content=\"article\" />}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:creator\" content={config.userTwitter} />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\n\nexport default class PageTemplate extends Component {\n  render() {\n    const { slug } = this.props.pageContext\n    const postNode = this.props.data.markdownRemark\n    const page = postNode.frontmatter\n\n    if (!page.id) {\n      page.id = slug\n    }\n\n    return (\n      <Layout>\n        <Helmet>\n          <title>{`${page.title} â€“ ${config.siteTitle}`}</title>\n        </Helmet>\n        <SEO postPath={slug} postNode={postNode} postSEO />\n        <div className=\"container\">\n          <article>\n            <header className=\"page-header\">\n              <h1>{page.title}</h1>\n            </header>\n            <div className=\"page\" dangerouslySetInnerHTML={{ __html: postNode.html }} />\n          </article>\n        </div>\n      </Layout>\n    )\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query PageBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        template\n      }\n      fields {\n        slug\n        date\n      }\n    }\n  }\n`\n"],"names":["SEO","render","title","description","postURL","path","this","props","postNode","postPath","postSEO","image","postMeta","frontmatter","excerpt","thumbnail","childImageSharp","fixed","src","urljoin","config","replace","blogURL","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","Component","PageTemplate","slug","pageContext","data","markdownRemark","page","id","className","dangerouslySetInnerHTML","__html","html"],"sourceRoot":""}